<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>XComponent.TradeCapture.ClientApi</name>
    </assembly>
    <members>
        <member name="T:XComponent.TradeCapture.TradeApi.TradeApi">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.TradeApi.Referential_Component">
            <summary>
            This property is used to communicate with Referential
             <para /></summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.TradeApi.TradeCapture_Component">
            <summary>
            This property is used to communicate with TradeCapture
             <para /></summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.TradeApi.CloseConnectionOnDispose">
            <summary>
            The RabbitMq connection is shared by all client Apis instances. 
             <para>When a client Api is disposed,  the RabbitMq thread is destroyed for all instances.</para><para>If you have several instances of your api set this property to false or use the helper ApiInstancesManager ()</para></summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.TradeApi.PrivateCommunicationIdentifier">
            <summary>
            Use this property to set a specific private topic.
             <para>Warning: The topic should be set before client Api initialization.</para><para>This topic is used to send private events.</para></summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.TradeApi.TimeOut">
            <summary>
            Set TimeOut (in mms) for retrieving EntryPoint
             <para>Default value is: 10000</para></summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.TradeApi.CommunicationType">
            <summary>
            Returns the type of communication
             <para>Possible values: BUS, IN_MEMORY, WEB_SOCKET</para></summary>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.TradeApi.Dispose">
            <summary>
            Dispose the Client Api and the communication layer
             </summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.Referential.IReferential_StateMachine.EntryPoint_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.Referential.IReferential_StateMachine.Referential_State">
            <summary />
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.IReferential_StateMachine.GetSnapshot(System.String,System.Int32)">
            <summary>
            Retrieves a snapshot of Referential state machines
             </summary>
            <param name="filter">This parameter is used to filter the snapshot request with a linq expression. The linq expression is applied to the public member</param>
            <param name="timeout">Snapshot timeout</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.IReferential_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.IReferential_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.Instrument,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.Instrument event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.IReferential_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.GetSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.GetSnapshot event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.IReferential_StateMachine.SendEvent(XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.IReferential_StateMachine.SendEvent(XComponent.Referential.UserObject.GetSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.GetSnapshot event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.IReferential_StateMachine.SendEvent(XComponent.Referential.UserObject.Instrument,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.Instrument event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.Referential.Referential_StateMachine.EntryPoint_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.Referential.Referential_StateMachine.Referential_State">
            <summary />
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential_StateMachine.GetSnapshot(System.String,System.Int32)">
            <summary>
            Retrieves a snapshot of Referential state machines
             </summary>
            <param name="filter">This parameter is used to filter the snapshot request with a linq expression. The linq expression is applied to the public member</param>
            <param name="timeout">Snapshot timeout</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.Instrument,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.Instrument event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.GetSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.GetSnapshot event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential_StateMachine.SendEvent(XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential_StateMachine.SendEvent(XComponent.Referential.UserObject.GetSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.GetSnapshot event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential_StateMachine.SendEvent(XComponent.Referential.UserObject.Instrument,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.Instrument event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="E:XComponent.TradeCapture.TradeApi.Referential.Referential_StateMachine.InstanceUpdated">
            <summary>
            This event is triggered when the Referential state machine is updated
            </summary>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential.IEntryPoint_State.Start(XComponent.Common.ApiContext.Context,XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential.IEntryPoint_State.Start(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the Start transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential.IReferential_State.AddInstrument(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.Instrument,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.Instrument event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential.IReferential_State.GetInstrumentSnapshot(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.GetSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.GetSnapshot event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential.IReferential_State.AddInstrument(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the AddInstrument transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.Referential.Referential.IReferential_State.GetInstrumentSnapshot(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the GetInstrumentSnapshot transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.TradeCapture.IXCTradeProcessor_StateMachine.EntryPoint_State">
            <summary />
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.TradeCapture.IXCTradeProcessor_StateMachine.GetSnapshot(System.String,System.Int32)">
            <summary>
            Retrieves a snapshot of XCTradeProcessor state machines
             </summary>
            <param name="filter">This parameter is used to filter the snapshot request with a linq expression. The linq expression is applied to the public member</param>
            <param name="timeout">Snapshot timeout</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.TradeCapture.IXCTradeProcessor_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Transaction,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Transaction event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.TradeCapture.IXCTradeProcessor_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.Transaction,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Transaction event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="P:XComponent.TradeCapture.TradeApi.TradeCapture.XCTradeProcessor_StateMachine.EntryPoint_State">
            <summary />
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.TradeCapture.XCTradeProcessor_StateMachine.GetSnapshot(System.String,System.Int32)">
            <summary>
            Retrieves a snapshot of XCTradeProcessor state machines
             </summary>
            <param name="filter">This parameter is used to filter the snapshot request with a linq expression. The linq expression is applied to the public member</param>
            <param name="timeout">Snapshot timeout</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.TradeCapture.XCTradeProcessor_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Transaction,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Transaction event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.TradeCapture.XCTradeProcessor_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.Transaction,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Transaction event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="E:XComponent.TradeCapture.TradeApi.TradeCapture.XCTradeProcessor_StateMachine.InstanceUpdated">
            <summary>
            This event is triggered when the XCTradeProcessor state machine is updated
            </summary>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.TradeCapture.XCTradeProcessor.IEntryPoint_State.NewTransaction(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Transaction,System.Action{System.Exception},XCClientAPICommon.Client.Visibility)">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Transaction event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeApi.TradeCapture.XCTradeProcessor.IEntryPoint_State.NewTransaction(XComponent.Common.ApiContext.Context,System.Action{System.Exception},XCClientAPICommon.Client.Visibility)">
            <summary>
            Triggers the NewTransaction transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="T:XComponent.TradeCapture.TradeValidatorApi.TradeValidatorApi">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeValidatorApi.TradeCapture_Component">
            <summary>
            This property is used to communicate with TradeCapture
             <para /></summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeValidatorApi.CloseConnectionOnDispose">
            <summary>
            The RabbitMq connection is shared by all client Apis instances. 
             <para>When a client Api is disposed,  the RabbitMq thread is destroyed for all instances.</para><para>If you have several instances of your api set this property to false or use the helper ApiInstancesManager ()</para></summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeValidatorApi.PrivateCommunicationIdentifier">
            <summary>
            Use this property to set a specific private topic.
             <para>Warning: The topic should be set before client Api initialization.</para><para>This topic is used to send private events.</para></summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeValidatorApi.TimeOut">
            <summary>
            Set TimeOut (in mms) for retrieving EntryPoint
             <para>Default value is: 10000</para></summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeValidatorApi.CommunicationType">
            <summary>
            Returns the type of communication
             <para>Possible values: BUS, IN_MEMORY, WEB_SOCKET</para></summary>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeValidatorApi.Dispose">
            <summary>
            Dispose the Client Api and the communication layer
             </summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.IXCTradeProcessor_StateMachine.EntryPoint_State">
            <summary />
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.IXCTradeProcessor_StateMachine.GetSnapshot(System.String,System.Int32)">
            <summary>
            Retrieves a snapshot of XCTradeProcessor state machines
             </summary>
            <param name="filter">This parameter is used to filter the snapshot request with a linq expression. The linq expression is applied to the public member</param>
            <param name="timeout">Snapshot timeout</param>
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.XCTradeProcessor_StateMachine.EntryPoint_State">
            <summary />
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.XCTradeProcessor_StateMachine.GetSnapshot(System.String,System.Int32)">
            <summary>
            Retrieves a snapshot of XCTradeProcessor state machines
             </summary>
            <param name="filter">This parameter is used to filter the snapshot request with a linq expression. The linq expression is applied to the public member</param>
            <param name="timeout">Snapshot timeout</param>
        </member>
        <member name="E:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.XCTradeProcessor_StateMachine.InstanceUpdated">
            <summary>
            This event is triggered when the XCTradeProcessor state machine is updated
            </summary>
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.Validation_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.ValidationError_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.TransactionRejected_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.Mapping_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.ErrorOnMapping_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.TransactionAccepted_State">
            <summary />
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.GetSnapshot(System.String,System.Int32)">
            <summary>
            Retrieves a snapshot of Transaction state machines
             </summary>
            <param name="filter">This parameter is used to filter the snapshot request with a linq expression. The linq expression is applied to the public member</param>
            <param name="timeout">Snapshot timeout</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Error,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Error event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Init,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Init event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Reject,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Reject event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.UpdateAndRetry,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.UpdateAndRetry event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Accept,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Accept event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.GetSnapshot,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.Referential.UserObject.GetSnapshot event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.InstrumentSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.InstrumentSnapshot event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.Instrument,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.Referential.UserObject.Instrument event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event
            </summary>
            <param name="evt">XComponent.Common.Event.DefaultEvent event</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Referential.UserObject.GetSnapshot,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.Referential.UserObject.GetSnapshot event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Referential.UserObject.Instrument,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.Referential.UserObject.Instrument event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.Referential.UserObject.InstrumentSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.InstrumentSnapshot event
            </summary>
            <param name="evt">XComponent.Referential.UserObject.InstrumentSnapshot event</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.Accept,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Accept event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.Error,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Error event
            </summary>
            <param name="evt">XComponent.TradeCapture.UserObject.Error event</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.Init,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Init event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.Reject,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Reject event
            </summary>
            <param name="evt">XComponent.TradeCapture.UserObject.Reject event</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.ITransaction_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.UpdateAndRetry,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.UpdateAndRetry event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.Validation_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.ValidationError_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.TransactionRejected_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.Mapping_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.ErrorOnMapping_State">
            <summary />
        </member>
        <member name="P:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.TransactionAccepted_State">
            <summary />
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.GetSnapshot(System.String,System.Int32)">
            <summary>
            Retrieves a snapshot of Transaction state machines
             </summary>
            <param name="filter">This parameter is used to filter the snapshot request with a linq expression. The linq expression is applied to the public member</param>
            <param name="timeout">Snapshot timeout</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Error,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Error event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Init,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Init event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Reject,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Reject event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.UpdateAndRetry,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.UpdateAndRetry event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Accept,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Accept event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.GetSnapshot,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.Referential.UserObject.GetSnapshot event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.InstrumentSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.InstrumentSnapshot event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.Instrument,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.Referential.UserObject.Instrument event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event
            </summary>
            <param name="evt">XComponent.Common.Event.DefaultEvent event</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Referential.UserObject.GetSnapshot,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.Referential.UserObject.GetSnapshot event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Referential.UserObject.Instrument,System.Action{System.Exception},XCClientAPICommon.Client.Visibility,System.String)">
            <summary>
            Sends the XComponent.Referential.UserObject.Instrument event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.Referential.UserObject.InstrumentSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.InstrumentSnapshot event
            </summary>
            <param name="evt">XComponent.Referential.UserObject.InstrumentSnapshot event</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.Accept,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Accept event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.Error,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Error event
            </summary>
            <param name="evt">XComponent.TradeCapture.UserObject.Error event</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.Init,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Init event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.Reject,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Reject event
            </summary>
            <param name="evt">XComponent.TradeCapture.UserObject.Reject event</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.SendEvent(XComponent.TradeCapture.UserObject.UpdateAndRetry,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.UpdateAndRetry event
            </summary>
            <param name="evt" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="E:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction_StateMachine.InstanceUpdated">
            <summary>
            This event is triggered when the Transaction state machine is updated
            </summary>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IValidation_State.ValidationError(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Error,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Error event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IValidation_State.InitMapping(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Init,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Init event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IValidation_State.ValidationError(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the ValidationError transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IValidation_State.InitMapping(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the InitMapping transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IValidationError_State.Reject(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Reject,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Reject event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IValidationError_State.UpdateAndRetry(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.UpdateAndRetry,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.UpdateAndRetry event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IValidationError_State.TimeOut(XComponent.Common.ApiContext.Context,XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IValidationError_State.Reject(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the Reject transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IValidationError_State.UpdateAndRetry(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the UpdateAndRetry transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IValidationError_State.TimeOut(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the TimeOut transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IMapping_State.Error(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Error,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Error event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IMapping_State.Accepted(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Accept,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Accept event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IMapping_State.GetInstrumentSnapshot(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.GetSnapshot,System.Action{System.Exception},XCClientAPICommon.Client.Visibility)">
            <summary>
            Sends the XComponent.Referential.UserObject.GetSnapshot event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IMapping_State.ReferentialNotification(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.InstrumentSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.InstrumentSnapshot event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IMapping_State.Error(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the Error transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IMapping_State.Accepted(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the Accepted transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IMapping_State.GetInstrumentSnapshot(XComponent.Common.ApiContext.Context,System.Action{System.Exception},XCClientAPICommon.Client.Visibility)">
            <summary>
            Triggers the GetInstrumentSnapshot transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IMapping_State.ReferentialNotification(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the ReferentialNotification transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IErrorOnMapping_State.ReferentialNotification(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.InstrumentSnapshot,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Referential.UserObject.InstrumentSnapshot event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IErrorOnMapping_State.TimeOut(XComponent.Common.ApiContext.Context,XComponent.Common.Event.DefaultEvent,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.Common.Event.DefaultEvent event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IErrorOnMapping_State.Reject(XComponent.Common.ApiContext.Context,XComponent.TradeCapture.UserObject.Reject,System.Action{System.Exception})">
            <summary>
            Sends the XComponent.TradeCapture.UserObject.Reject event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IErrorOnMapping_State.UpdateReferential(XComponent.Common.ApiContext.Context,XComponent.Referential.UserObject.Instrument,System.Action{System.Exception},XCClientAPICommon.Client.Visibility)">
            <summary>
            Sends the XComponent.Referential.UserObject.Instrument event using a context. 
            </summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="transitionEvent" />
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IErrorOnMapping_State.ReferentialNotification(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the ReferentialNotification transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IErrorOnMapping_State.TimeOut(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the TimeOut transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IErrorOnMapping_State.Reject(XComponent.Common.ApiContext.Context,System.Action{System.Exception})">
            <summary>
            Triggers the Reject transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
        </member>
        <member name="M:XComponent.TradeCapture.TradeValidatorApi.TradeCapture.Transaction.IErrorOnMapping_State.UpdateReferential(XComponent.Common.ApiContext.Context,System.Action{System.Exception},XCClientAPICommon.Client.Visibility)">
            <summary>
            Triggers the UpdateReferential transition using a context. 
             <para /></summary>
            <param name="context">Client Api context. Used to target a specific instance of state machine</param>
            <param name="onExceptionOccured">This event is triggered if an exception is raised. If this option is set, the exception will be catch. If this option is not set, the exception will be thrown.</param>
            <param name="visibility">If parameter is set to Visibility.Private, the event will be sent with a private topic.</param>
        </member>
    </members>
</doc>